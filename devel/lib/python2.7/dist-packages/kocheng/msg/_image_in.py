# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kocheng/image_in.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class image_in(genpy.Message):
  _md5sum = "98a894c5a1e69900105970008d648417"
  _type = "kocheng/image_in"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 x_init
int32 y_init
int32 width
int32 height
int32 LowH 
int32 HighH
int32 LowS
int32 HighS
int32 LowV
int32 HighV
int32 Noise
"""
  __slots__ = ['x_init','y_init','width','height','LowH','HighH','LowS','HighS','LowV','HighV','Noise']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x_init,y_init,width,height,LowH,HighH,LowS,HighS,LowV,HighV,Noise

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(image_in, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x_init is None:
        self.x_init = 0
      if self.y_init is None:
        self.y_init = 0
      if self.width is None:
        self.width = 0
      if self.height is None:
        self.height = 0
      if self.LowH is None:
        self.LowH = 0
      if self.HighH is None:
        self.HighH = 0
      if self.LowS is None:
        self.LowS = 0
      if self.HighS is None:
        self.HighS = 0
      if self.LowV is None:
        self.LowV = 0
      if self.HighV is None:
        self.HighV = 0
      if self.Noise is None:
        self.Noise = 0
    else:
      self.x_init = 0
      self.y_init = 0
      self.width = 0
      self.height = 0
      self.LowH = 0
      self.HighH = 0
      self.LowS = 0
      self.HighS = 0
      self.LowV = 0
      self.HighV = 0
      self.Noise = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_11i().pack(_x.x_init, _x.y_init, _x.width, _x.height, _x.LowH, _x.HighH, _x.LowS, _x.HighS, _x.LowV, _x.HighV, _x.Noise))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.x_init, _x.y_init, _x.width, _x.height, _x.LowH, _x.HighH, _x.LowS, _x.HighS, _x.LowV, _x.HighV, _x.Noise,) = _get_struct_11i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_11i().pack(_x.x_init, _x.y_init, _x.width, _x.height, _x.LowH, _x.HighH, _x.LowS, _x.HighS, _x.LowV, _x.HighV, _x.Noise))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.x_init, _x.y_init, _x.width, _x.height, _x.LowH, _x.HighH, _x.LowS, _x.HighS, _x.LowV, _x.HighV, _x.Noise,) = _get_struct_11i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_11i = None
def _get_struct_11i():
    global _struct_11i
    if _struct_11i is None:
        _struct_11i = struct.Struct("<11i")
    return _struct_11i
