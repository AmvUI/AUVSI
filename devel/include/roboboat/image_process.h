// Generated by gencpp from file roboboat/image_process.msg
// DO NOT EDIT!


#ifndef ROBOBOAT_MESSAGE_IMAGE_PROCESS_H
#define ROBOBOAT_MESSAGE_IMAGE_PROCESS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roboboat
{
template <class ContainerAllocator>
struct image_process_
{
  typedef image_process_<ContainerAllocator> Type;

  image_process_()
    : buoy_red(0)
    , buoy_green(0)
    , buoy_blue(0)
    , gate_red(0)
    , gate_green(0)
    , x_flag(0)
    , y_flag(0)
    , dock_one(0)
    , dock_two(0)
    , dock_three(0)  {
    }
  image_process_(const ContainerAllocator& _alloc)
    : buoy_red(0)
    , buoy_green(0)
    , buoy_blue(0)
    , gate_red(0)
    , gate_green(0)
    , x_flag(0)
    , y_flag(0)
    , dock_one(0)
    , dock_two(0)
    , dock_three(0)  {
  (void)_alloc;
    }



   typedef int16_t _buoy_red_type;
  _buoy_red_type buoy_red;

   typedef int16_t _buoy_green_type;
  _buoy_green_type buoy_green;

   typedef int16_t _buoy_blue_type;
  _buoy_blue_type buoy_blue;

   typedef int16_t _gate_red_type;
  _gate_red_type gate_red;

   typedef int16_t _gate_green_type;
  _gate_green_type gate_green;

   typedef int16_t _x_flag_type;
  _x_flag_type x_flag;

   typedef int16_t _y_flag_type;
  _y_flag_type y_flag;

   typedef int16_t _dock_one_type;
  _dock_one_type dock_one;

   typedef int16_t _dock_two_type;
  _dock_two_type dock_two;

   typedef int16_t _dock_three_type;
  _dock_three_type dock_three;





  typedef boost::shared_ptr< ::roboboat::image_process_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboboat::image_process_<ContainerAllocator> const> ConstPtr;

}; // struct image_process_

typedef ::roboboat::image_process_<std::allocator<void> > image_process;

typedef boost::shared_ptr< ::roboboat::image_process > image_processPtr;
typedef boost::shared_ptr< ::roboboat::image_process const> image_processConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboboat::image_process_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboboat::image_process_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roboboat

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geographic_msgs': ['/opt/ros/kinetic/share/geographic_msgs/cmake/../msg'], 'roboboat': ['/home/mfikih15/Documents/AUVSI/src/roboboat/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'mavros_msgs': ['/opt/ros/kinetic/share/mavros_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'uuid_msgs': ['/opt/ros/kinetic/share/uuid_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roboboat::image_process_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboboat::image_process_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboboat::image_process_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboboat::image_process_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboboat::image_process_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboboat::image_process_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboboat::image_process_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f2466f92f806c6e64e91ea6278fe0b11";
  }

  static const char* value(const ::roboboat::image_process_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf2466f92f806c6e6ULL;
  static const uint64_t static_value2 = 0x4e91ea6278fe0b11ULL;
};

template<class ContainerAllocator>
struct DataType< ::roboboat::image_process_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboboat/image_process";
  }

  static const char* value(const ::roboboat::image_process_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboboat::image_process_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 buoy_red\n\
int16 buoy_green\n\
int16 buoy_blue\n\
int16 gate_red\n\
int16 gate_green\n\
int16 x_flag\n\
int16 y_flag\n\
int16 dock_one\n\
int16 dock_two\n\
int16 dock_three\n\
";
  }

  static const char* value(const ::roboboat::image_process_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboboat::image_process_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.buoy_red);
      stream.next(m.buoy_green);
      stream.next(m.buoy_blue);
      stream.next(m.gate_red);
      stream.next(m.gate_green);
      stream.next(m.x_flag);
      stream.next(m.y_flag);
      stream.next(m.dock_one);
      stream.next(m.dock_two);
      stream.next(m.dock_three);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct image_process_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboboat::image_process_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboboat::image_process_<ContainerAllocator>& v)
  {
    s << indent << "buoy_red: ";
    Printer<int16_t>::stream(s, indent + "  ", v.buoy_red);
    s << indent << "buoy_green: ";
    Printer<int16_t>::stream(s, indent + "  ", v.buoy_green);
    s << indent << "buoy_blue: ";
    Printer<int16_t>::stream(s, indent + "  ", v.buoy_blue);
    s << indent << "gate_red: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gate_red);
    s << indent << "gate_green: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gate_green);
    s << indent << "x_flag: ";
    Printer<int16_t>::stream(s, indent + "  ", v.x_flag);
    s << indent << "y_flag: ";
    Printer<int16_t>::stream(s, indent + "  ", v.y_flag);
    s << indent << "dock_one: ";
    Printer<int16_t>::stream(s, indent + "  ", v.dock_one);
    s << indent << "dock_two: ";
    Printer<int16_t>::stream(s, indent + "  ", v.dock_two);
    s << indent << "dock_three: ";
    Printer<int16_t>::stream(s, indent + "  ", v.dock_three);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOBOAT_MESSAGE_IMAGE_PROCESS_H
