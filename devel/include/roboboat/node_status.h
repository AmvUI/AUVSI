// Generated by gencpp from file roboboat/node_status.msg
// DO NOT EDIT!


#ifndef ROBOBOAT_MESSAGE_NODE_STATUS_H
#define ROBOBOAT_MESSAGE_NODE_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roboboat
{
template <class ContainerAllocator>
struct node_status_
{
  typedef node_status_<ContainerAllocator> Type;

  node_status_()
    : override_status(false)
    , image_front_status(false)
    , image_back_status(false)
    , green_hough_status(false)
    , red_hough_status(false)
    , blue_hough_status(false)  {
    }
  node_status_(const ContainerAllocator& _alloc)
    : override_status(false)
    , image_front_status(false)
    , image_back_status(false)
    , green_hough_status(false)
    , red_hough_status(false)
    , blue_hough_status(false)  {
  (void)_alloc;
    }



   typedef uint8_t _override_status_type;
  _override_status_type override_status;

   typedef uint8_t _image_front_status_type;
  _image_front_status_type image_front_status;

   typedef uint8_t _image_back_status_type;
  _image_back_status_type image_back_status;

   typedef uint8_t _green_hough_status_type;
  _green_hough_status_type green_hough_status;

   typedef uint8_t _red_hough_status_type;
  _red_hough_status_type red_hough_status;

   typedef uint8_t _blue_hough_status_type;
  _blue_hough_status_type blue_hough_status;





  typedef boost::shared_ptr< ::roboboat::node_status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboboat::node_status_<ContainerAllocator> const> ConstPtr;

}; // struct node_status_

typedef ::roboboat::node_status_<std::allocator<void> > node_status;

typedef boost::shared_ptr< ::roboboat::node_status > node_statusPtr;
typedef boost::shared_ptr< ::roboboat::node_status const> node_statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboboat::node_status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboboat::node_status_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roboboat

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geographic_msgs': ['/opt/ros/kinetic/share/geographic_msgs/cmake/../msg'], 'roboboat': ['/home/mfikih15/Documents/AUVSI/src/roboboat/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'mavros_msgs': ['/opt/ros/kinetic/share/mavros_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'uuid_msgs': ['/opt/ros/kinetic/share/uuid_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roboboat::node_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboboat::node_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboboat::node_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboboat::node_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboboat::node_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboboat::node_status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboboat::node_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d36a6a4442f3498759f12ca2b580445e";
  }

  static const char* value(const ::roboboat::node_status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd36a6a4442f34987ULL;
  static const uint64_t static_value2 = 0x59f12ca2b580445eULL;
};

template<class ContainerAllocator>
struct DataType< ::roboboat::node_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboboat/node_status";
  }

  static const char* value(const ::roboboat::node_status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboboat::node_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool override_status\n\
bool image_front_status\n\
bool image_back_status\n\
bool green_hough_status\n\
bool red_hough_status\n\
bool blue_hough_status\n\
\n\
";
  }

  static const char* value(const ::roboboat::node_status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboboat::node_status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.override_status);
      stream.next(m.image_front_status);
      stream.next(m.image_back_status);
      stream.next(m.green_hough_status);
      stream.next(m.red_hough_status);
      stream.next(m.blue_hough_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct node_status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboboat::node_status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboboat::node_status_<ContainerAllocator>& v)
  {
    s << indent << "override_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.override_status);
    s << indent << "image_front_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.image_front_status);
    s << indent << "image_back_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.image_back_status);
    s << indent << "green_hough_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.green_hough_status);
    s << indent << "red_hough_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.red_hough_status);
    s << indent << "blue_hough_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.blue_hough_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOBOAT_MESSAGE_NODE_STATUS_H
